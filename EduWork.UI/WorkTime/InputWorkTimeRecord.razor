
@using EduWork.Common.DTO
@inject HttpClient Http
<div style="text-align:left;">
<h4>Unos radnog vremena:</h4>
<EditForm Model="workTimePart" OnValidSubmit="saveWorkTimeRecord">
    <DataAnnotationsValidator/>
    
    <div class="form-group" >
        <label  for="workDate">Odaberite dan:</label> <br />
            <button type="button" @onclick="() => ChangeDate(-1)" class="chevron"><span><i class="fa fa-chevron-left"></i></span></button>
        
        <InputDate id="workDate" @bind-Value="selectedDate" class="form-control" style="display:inline-block; max-width:fit-content;" />
            <button type="button" @onclick="() => ChangeDate(1)" class="chevron"><span><i class="fa fa-chevron-right"></i></span></button>
        <ValidationMessage For="@(() => workTimePart.WorkDate)" /><br />
                
        <label style="padding-top:20px;">Unesite odsječak radnog vremena:</label><br />

            <InputDate id="startTime" @bind-Value="workTimePart.StartTime" Type="InputDateType.Time" class="form-control" style=" display:inline-block; max-width:fit-content;" />
        
        -
            <InputDate id="endTime" @bind-Value="workTimePart.EndTime" Type="InputDateType.Time" class="form-control" style=" display:inline-block; max-width:fit-content;" />
        <ValidationMessage For="@(() => workTimePart.StartTime)" />
        <ValidationMessage For="@(() => workTimePart.EndTime)" />
        <p style="color:crimson">@errorContent</p>

    </div>
        <button class="btn btn-primary" style="margin-top:15px " type="submit">Unesi</button>
    
</EditForm>
</div>
@code {
    [Parameter] public EventCallback<DateOnly> OnDateChanged { get; set; }
    [Parameter] public EventCallback OnNewRecord { get; set; }
    [Parameter] public TimeSpan TotalWorkTime { get; set; } = TimeSpan.Zero;

    private TimeSpan CalculateRemainingWorkTime()
    {
        TimeSpan eightHours = TimeSpan.FromHours(8);
        TimeSpan time = eightHours - TotalWorkTime;
        return time;
    }

    private void UpdateEndTime()
    {
        var startTime = new DateTime(1, 1, 1, workTimePart.StartTime.Hour, workTimePart.StartTime.Minute, workTimePart.StartTime.Second);
        var endTime = startTime + CalculateRemainingWorkTime();
        workTimePart.EndTime = new TimeOnly(endTime.Hour, endTime.Minute, endTime.Second);
    }

    private void OnStartTimeChanged(ChangeEventArgs e)
    {
        workTimePart.StartTime = TimeOnly.Parse(e.Value.ToString());
        UpdateEndTime();
    }

    private void OnEndTimeChanged(ChangeEventArgs e)
    {
        workTimePart.EndTime = TimeOnly.Parse(e.Value.ToString());
    }

    public string? errorContent;

    SetWorkDayTimeDTO workTimePart = new SetWorkDayTimeDTO
    {
            WorkDate = DateOnly.FromDateTime(DateTime.Now),
            UserId = 1,
            StartTime = TimeOnly.FromDateTime(DateTime.Now)
    };

    public DateOnly selectedDate
    {
        get => workTimePart.WorkDate;
        set
        {
            workTimePart.WorkDate = value;
            OnDateChanged.InvokeAsync(value);
        }
    }

    async Task saveWorkTimeRecord()
    {
        var response = await Http.PostAsJsonAsync("api/WorkDayTimes", workTimePart);

        if(response.IsSuccessStatusCode)
        {
            Console.WriteLine("Work time part added succesfully");
            await OnNewRecord.InvokeAsync();
            errorContent = "";
        }
            else
            {
                errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorContent);
            }
    }
         
    

    private void ChangeDate(int change)
    {
        selectedDate = selectedDate.AddDays(change);
    }

    }
