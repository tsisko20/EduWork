@page "/worktime"
@using EduWork.Common.DTO
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject IToastService toastService

<PageTitle>Radno vrijeme</PageTitle>

<h4 style="text-align:center">Upravljanje radnim vremenom</h4>

<div class="container">
    <div class="row g-2">
        <div style="margin-top:50px;" class="col-md-6">

            <div style="text-align:left;">
                <h4>Unos radnog vremena:</h4>
                <EditForm Model="workTimePart" OnValidSubmit="saveWorkTimeRecord">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="workDate">Odaberite dan:</label> <br />
                        <button type="button" @onclick="() => ChangeDate(-1)" class="chevron left"><span><i class="fa fa-chevron-left"></i></span></button>

                        <InputDate id="workDate" @bind-Value="workTimePart.WorkDate" class="form-control" style="display:inline-block; max-width:fit-content;" @onblur="UpdateTable" />
                        <button type="button" @onclick="() => ChangeDate(1)" class="chevron right"><span><i class="fa fa-chevron-right"></i></span></button>
                        <ValidationMessage For="@(() => workTimePart.WorkDate)" /><br />

                        <label style="padding-top:20px;">Unesite odsječak radnog vremena:</label><br />

                        <InputDate id="startTime" @bind-Value="_startTime" Type="InputDateType.Time" class="form-control" style=" display:inline-block; max-width:fit-content;" />

                        -
                        <InputDate id="endTime" @bind-Value="workTimePart.EndTime" Type="InputDateType.Time" class="form-control" style=" display:inline-block; max-width:fit-content;" />
                        <ValidationMessage For="@(() => workTimePart.StartTime)" />
                        <ValidationMessage For="@(() => workTimePart.EndTime)" />

                    </div>
                    <button class="btn btn-primary" style="margin-top:15px" type="submit">Unesi</button>

                </EditForm>
            </div>

        </div>
        <div style="margin-top:50px;" class=" col-md-6">

            <h4 class="odabraniDan">Vremenski odsječci za @workTimePart.WorkDate.Day/@workTimePart.WorkDate.Month/@workTimePart.WorkDate.Year:</h4>

            @if (workTimeList == null)
            {
                <p>Učitavanje...</p>
            }
            else if (workTimeList.Count == 0)
            {
                <p>Nema vremenskih odsječaka za odabrani dan.</p>
            }
            else
            {
                <p>Ukupno odrađenih sati: @FormatTimeSpan(CalculateTotalTime())</p>
                <div class="tableScroll">
                    <table class="table table-bordered table-striped">
                        <thead class="text-white">
                            <tr>
                                <th>#</th>
                                <th scope="col">Start Time</th>
                                <th scope="col">End Time</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var element in workTimeList)
                            {
                                <tr>
                                    <td>@(workTimeList.IndexOf(element) + 1)</td>
                                    <td><InputDate @bind-Value="@element.StartTime" Type="InputDateType.Time" disabled="@(!editingElements.ContainsKey(element.Id) || !editingElements[element.Id].IsEditing)" /></td>
                                    <td><InputDate @bind-Value="@element.EndTime" Type="InputDateType.Time" disabled="@(!editingElements.ContainsKey(element.Id) || !editingElements[element.Id].IsEditing)" /></td>
                                    <td>
                                        @if (editingElements.ContainsKey(element.Id) && editingElements[element.Id].IsEditing)
                                        {
                                            <button class="btn btn-success" @onclick="() => applyChanges(element.Id)"><i class="fas fa-check"></i></button>
                                            <button class="btn btn-secondary" @onclick="() => cancelEdit(element.Id)"><i class="fas fa-times"></i></button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger" @onclick="() => deleteWorkPart(element.Id)"><i class="fas fa-trash-alt"></i></button>
                                            <button class="btn btn-info" @onclick="() => editWorkPart(element.Id)"><i class="far fa-edit"></i></button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {

    public TimeSpan TotalWorkTime { get; set; } = TimeSpan.Zero;

    private TimeSpan CalculateRemainingWorkTime()
    {
        TimeSpan eightHours = TimeSpan.FromHours(8);
        TimeSpan time = eightHours - TotalWorkTime;
        if (TotalWorkTime > eightHours)
        {
            return TimeSpan.Zero;
        }
        return time;
    }

    private void UpdateInsertTime(TimeOnly latestTime)
    {
        workTimePart.StartTime = latestTime;
        var startTime = new DateTime(1, 1, 1, workTimePart.StartTime.Hour, workTimePart.StartTime.Minute, workTimePart.StartTime.Second);
        var endTime = startTime + CalculateRemainingWorkTime();
        if (endTime.Day != 1)
        {
            workTimePart.EndTime = new TimeOnly(23, 45, 00);
        }
        else
        {
            workTimePart.EndTime = new TimeOnly(endTime.Hour, endTime.Minute, endTime.Second);
        }
    }

    public TimeOnly _startTime
    {
        get { return workTimePart.StartTime; }
        set
        {
            workTimePart.StartTime = value;
        }
    }

    SetWorkDayTimeDTO workTimePart = new SetWorkDayTimeDTO
        {
            WorkDate = DateOnly.FromDateTime(DateTime.Now),
            UserId = 1,
            StartTime = TimeOnly.FromDateTime(DateTime.Now)
        };

    async Task saveWorkTimeRecord()
    {
        var response = await Http.PostAsJsonAsync("api/WorkDayTimes", workTimePart);

        if (response.IsSuccessStatusCode)
        {
            await UpdateTable();
            toastService.ShowSuccess("Vremenski odsječak je pohranjen.");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            toastService.ShowError(errorContent);
        }
    }

    private async void ChangeDate(int change)
    {
        workTimePart.WorkDate = workTimePart.WorkDate.AddDays(change);
        await UpdateTable();
    }

    List<WorkTimePartDTO>? workTimeList;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTable();
    }

    TimeOnly latestTime = TimeOnly.FromDateTime(DateTime.Now);

    public async Task UpdateTable()
    {
        try
        {
            RequestWorkTimePartsDTO request = new RequestWorkTimePartsDTO
                {
                    UserId = 1,
                    Day = workTimePart.WorkDate.Day,
                    Month = workTimePart.WorkDate.Month,
                    Year = workTimePart.WorkDate.Year
                };

            workTimeList = await Http.GetFromJsonAsync<List<WorkTimePartDTO>>($"api/WorkDayTimes?UserId={request.UserId}&Day={request.Day}&Month={request.Month}&Year={request.Year}");
            TimeOnly latestTime = TimeOnly.FromDateTime(DateTime.Now);
            foreach (WorkTimePartDTO element in workTimeList)
            {
                if (latestTime <= element.EndTime) latestTime = element.EndTime;
            }
            CalculateTotalTime();
            UpdateInsertTime(latestTime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public TimeSpan CalculateTotalTime()
    {
        TotalWorkTime = TimeSpan.Zero;
        foreach (var element in workTimeList)
        {
            if (element?.StartTime != null && element?.EndTime != null)
            {
                DateTime startDateTime = new DateTime(
                    1, 1, 1, element.StartTime.Hour, element.StartTime.Minute, element.StartTime.Second);

                DateTime endDateTime = new DateTime(
                    1, 1, 1, element.EndTime.Hour, element.EndTime.Minute, element.EndTime.Second);

                TotalWorkTime += endDateTime - startDateTime;
            }
        }
        return TotalWorkTime;
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        TimeSpan eightHours = TimeSpan.FromHours(8);
        return $"{(int)timeSpan.TotalHours}:{timeSpan:mm}";
    }

    private async void ApplyUpdates()
    { }

    private Dictionary<int, (bool IsEditing, WorkTimePartDTO OriginalValue)> editingElements = new();

    private void editWorkPart(int id)
    {
        // Cancel any current edit
        if (editingElements.Any(e => e.Value.IsEditing))
        {
            var currentEdit = editingElements.First(e => e.Value.IsEditing).Key;
            cancelEdit(currentEdit);
        }

        // Start new edit
        var element = workTimeList.First(e => e.Id == id);
        editingElements[id] = (true, new WorkTimePartDTO { Id = element.Id, StartTime = element.StartTime, EndTime = element.EndTime });
        StateHasChanged();
    }

    private async void applyChanges(int id)
    {
        if (editingElements.TryGetValue(id, out var editState))
        {
            var element = workTimeList.First(e => e.Id == id);
            UpdateWorkTimePartDTO update = new UpdateWorkTimePartDTO
                {
                    Id = element.Id,
                    StartTime = element.StartTime,
                    EndTime = element.EndTime,
                    UserId = 1,
                    WorkDate = element.WorkDate
                };
            var response = await Http.PutAsJsonAsync($"api/WorkDayTimes/", update);

            if (response.IsSuccessStatusCode)
            {
                editingElements.Remove(id);
                toastService.ShowSuccess("Changes applied successfully.");
            }
            else
            {
                toastService.ShowError(await response.Content.ReadAsStringAsync());
            }
            await UpdateTable();
        }
    }

    private void cancelEdit(int id)
    {
        if (editingElements.TryGetValue(id, out var editState))
        {
            var element = workTimeList.First(e => e.Id == id);
            element.StartTime = editState.OriginalValue.StartTime;
            element.EndTime = editState.OriginalValue.EndTime;

            editingElements.Remove(id);
            StateHasChanged();
        }
    }

    private async void deleteWorkPart(int id)
    {
        var response = await Http.DeleteAsync($"api/WorkDayTimes/{id}");

        if (response.IsSuccessStatusCode)
        {
            var elementToRemove = workTimeList.FirstOrDefault(e => e.Id == id);
            if (elementToRemove != null)
            {
                workTimeList.Remove(elementToRemove);
                toastService.ShowSuccess("Vremenski odsječak je obrisan.");
                await UpdateTable();
            }
        }
        else
        {
            toastService.ShowError(await response.Content.ReadAsStringAsync());
        }
    }
}
