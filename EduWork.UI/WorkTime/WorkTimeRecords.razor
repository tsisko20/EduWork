@using EduWork.Common.DTO
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
<h4 >Vremenski odsječci za @request.Day/@request.Month/@request.Year:</h4>

    @if (workTimeList == null)
    {
        <p>Učitavanje...</p>
    }
    else if (workTimeList.Count == 0)
    {
        <p>Nema vremenskih odsječaka za odabrani dan.</p>
    }
    else
    {
    <p>Ukupno odrađenih sati: @FormatTimeSpan(CalculateTotalTime())</p>
    <div class="tableScroll">
            <table class="table table-bordered table-striped ">
                <thead class="text-white">
                    <tr>
                        <th>#</th>
                        <th scope="col">Start Time</th>
                        <th scope="col">End Time</th>
                        <th scope="col">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var element in updatedList)
                    {
                        <tr>
                        <td>@(updatedList.IndexOf(element) + 1)</td>
                            <td><InputDate @bind-Value="@element.StartTime" Type="InputDateType.Time" /></td>
                            <td><InputDate @bind-Value="@element.EndTime" Type="InputDateType.Time" /></td>
                            <td>
                                <div class="form-check form-switch text-center">
                                    <input @onclick="() => SetDelete(element.Id)" type="checkbox" class="form-check-input" checked="@element.Delete">
                                </div>

                            </td>
                        </tr>
                    }
                    
                            
                       
                </tbody>
        </table>

    </div>
    <div style="text-align:center; margin-top:10px">
        <button type="button" @onclick="() => ApplyUpdates()" class=" btn btn-primary unfocus" style="margin-right:15px">Primjeni</button>
        <button type="button" class="btn btn-secondary unfocus">Odbaci</button>
    </div>
    }



@code {
    [Parameter]
    public RequestWorkTimePartsDTO? request { get; set; }
    List<WorkTimePartDTO>? workTimeList;
    List<UpdateWorkTimePartsDTO> updatedList = new List<UpdateWorkTimePartsDTO>();
    public TimeSpan TotalWorkTime { get; private set; } = TimeSpan.Zero;
    

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }



    public async Task Update()
    {
        try
        {
            workTimeList = await Http.GetFromJsonAsync<List<WorkTimePartDTO>>($"api/WorkDayTimes?UserId={request.UserId}&Day={request.Day}&Month={request.Month}&Year={request.Year}");
            updatedList.Clear();
            foreach (var part in workTimeList)
            {
                var updatePart = new UpdateWorkTimePartsDTO
                    {
                        Id = part.Id,
                        StartTime = part.StartTime,
                        EndTime = part.EndTime,
                        WorkDate = part.WorkDate
                    };
                updatedList.Add(updatePart);
            }
            CalculateTotalTime();
            StateHasChanged(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SetDelete(int id)
    {
        var item = updatedList.First(x => x.Id == id);
        item.Delete = !item.Delete;
    }

    public TimeSpan CalculateTotalTime()
    {
        TotalWorkTime = TimeSpan.Zero;
        foreach (var element in updatedList)
        {
            if (!element.Delete) // Consider only elements that are not marked for deletion
            {
                if (element?.StartTime != null && element?.EndTime != null)
                {
                    DateTime startDateTime = new DateTime(
                        1, 1, 1, element.StartTime.Hour, element.StartTime.Minute, element.StartTime.Second);

                    DateTime endDateTime = new DateTime(
                        1, 1, 1, element.EndTime.Hour, element.EndTime.Minute, element.EndTime.Second);

                    TotalWorkTime += endDateTime - startDateTime;
                }
            }
        }
        return TotalWorkTime;
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        TimeSpan eightHours = TimeSpan.FromHours(8);
        return $"{(int)timeSpan.TotalHours}:{timeSpan:mm}";
    }

    private async void ApplyUpdates()
    {
        List<UpdateWorkTimePartsDTO> differentElements = new List<UpdateWorkTimePartsDTO>();
        List<int> deleteElements = new List<int>();
        foreach (var element in updatedList)
        {
            bool changed = false;
            foreach (var workTime in workTimeList)
            {
                if (element.Id == workTime.Id && element.StartTime == workTime.StartTime && element.EndTime == workTime.EndTime)
                {
                    changed = true;
                    break;
                }
            }
            if (!changed)
            {
                differentElements.Add(element);
            }
            if (element.Delete)
            {
                deleteElements.Add(element.Id);
                element.Delete = false;
            }
        }

        var updateResponse = await Http.PutAsJsonAsync("api/WorkDayTimes", differentElements);
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Delete,
                RequestUri = new Uri("https://localhost:7001/api/WorkDayTimes"),
                Content = new StringContent(JsonConvert.SerializeObject(deleteElements), Encoding.UTF8, "application/json")
            };
        var deleteResponse = await Http.SendAsync(request);
        //StateHasChanged();
        await Update();
        //string updateResponseString = updateResponse.Content.ReadAsStringAsync().ToString();
        string mergedResponse = updateResponse.Content.ReadAsStringAsync().ToString() + "\n" + deleteResponse.Content.ReadAsStringAsync().ToString();
        
    }
    

}
